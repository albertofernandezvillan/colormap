<% layout('layout') -%>

<!-- Begin page content -->
<div class="container">
  <br/>
  <p class="lead">Create a custom colormap by dragging points on the RGB intensity curves.</p>
  
  <div class="row">
    
    <div class="col-lg-6">
      <div id="raph-holder"></div>
      <div id="plot-control-buttons">
        Bring to Front: 
        <button id="rfrontbutton" class="movetofront" style="color:red">R</button>
        <button id="gfrontbutton" class="movetofront" style="color:green">G</button>
        <button id="bfrontbutton" class="movetofront" style="color:blue">B</button>
      </div> 
    </div>

    <div id="raph-cbar-holder" class="col-lg-1"></div>
    
    <div id="dl-sidebar" class="col-lg-4">
      <p class="lead">Download your colormap</p>
      <p>Choose N colors </p>
      <p>Save to Gallery? Name</p>
      <p>Download Button (.txt)</p>
      <p>Usage</p>
<pre>% Matlab
importdata...
# Matplotlib
something else
</pre>
    </div>
  </div>

</div>

<script src="javascripts/colormapLine.js"></script>
<script src="javascripts/drawColorbar.js"></script>
<script>
  window.onload = function() {
    // Configure and create Raphael object
    var W = 460,
        H = 350,
        r = Raphael("raph-holder", W, H);

    graph = r.rect(5, 0, 450, H, 10).attr({fill: '#eee', stroke: '#999', 'stroke-width': 1});

    gridp = "M120,0L120,350M230,0L230,350M340,0L340,350M5,88L455,88M5,175L455,175M5,263L455,263"
    gridPath = r.path(gridp).attr({stroke: '#bbb'});

    var Red = new colormapLine(r, 5, "rgb(255,0,0)");
    var Green = new colormapLine(r, 5, "rgb(0,255,0)");
    var Blue = new colormapLine(r, 5, "rgb(0,0,255)");
    var cmapLines = [Red, Green, Blue];

    var cbarW = 50,
        cbarH = 350,
        numColors = 175,
        rcbar = Raphael("raph-cbar-holder", cbarW, cbarH);

    // Get the colorbar rectangles and set the drag events to update.
    var colorRects = initColorbar(r, rcbar, numColors, cmapLines);
    cbarRect = rcbar.rect(0,0,cbarW,cbarH).attr({stroke: '#666'});

    var updateCBar = function() {

      RIV = Red.getIntensityValues(numColors);
      GIV = Green.getIntensityValues(numColors);
      BIV = Blue.getIntensityValues(numColors);

      for(var color = 0; color <= numColors; color++) {
          hexcolor = Raphael.rgb(RIV[color], GIV[color], BIV[color]);
          colorRects[color].attr({fill: hexcolor, "stroke-width": 0});
      }

      cbarRect.toFront();
/*      cbarRect.attr({fill: "90-#fff-#f00:20-#000"})
*/    };

    for(var i = 0; i < cmapLines.length; i++) {
      for(var j = 0; j < cmapLines[i].buttons.items.length; j++) {
        cmapLines[i].buttons.items[j].drag(function (dx,dy) { updateCBar();});
      }
    }

    $("#rfrontbutton").click(function(){
      Red.buttons.toFront();
      Red.path.toFront();
    });
    $("#gfrontbutton").click(function(){
      Green.buttons.toFront();
      Green.path.toFront();
    });
    $("#bfrontbutton").click(function(){
      Blue.buttons.toFront();
      Blue.path.toFront();
    });


  };
</script>
    