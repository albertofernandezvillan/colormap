<% layout('layout') -%>

<!-- Begin page content -->
<div class="container">
  <br/>
  <p class="lead">Create a custom colormap by dragging points on the RGB intensity curves.</p>
  
  <div class="row">
    
    <div class="col-lg-6">
      <div id="raph-cbar-holder"></div>
      <div id="raph-holder"></div>
      <div id="plot-control-buttons">
        <span>Bring to Front:</span>
        <button id="rfrontbutton" class="movetofront" style="color:red">R</button>
        <button id="gfrontbutton" class="movetofront" style="color:green">G</button>
        <button id="bfrontbutton" class="movetofront" style="color:blue">B</button>

        <span style="margin-left:12px">Swap:</span>
        <button id="rgswapbutton" class="swap"><span style="color:red">R</span><span style="color:green">G</span></button>
        <button id="rbswapbutton" class="swap"><span style="color:red">R</span><span style="color:blue">B</span></button>
        <button id="gbswapbutton" class="swap"><span style="color:green">G</span><span style="color:blue">B</span></button>

        <span style="margin-left:12px">Flip:</span>
        <button id="flipbutton"><span class="glyphicon glyphicon-sort" style="color: #555"></span></button>
      </div> 
    </div>
    
    <div id="dl-sidebar" class="col-lg-4">
      <p class="lead" style="margin-bottom: 10px">Copy your colormap</p>
      <form class="form-horizontal" style="margin-bottom: 10px">
        <fieldset>
          <div class="control-group">
            <label class="control-label" for="ncolorsinput" style="display: inline-block; font-weight: normal">Number of Colors: </label>
            <span class="controls">
              <input id="ncolorsinput" name="ncolors" type="text" maxlength="3" size="3" placeholder="256" value="256" class="form-control input-sm" style="display: inline-block; width: 40px; height: 30px; padding: 3px 7px; margin-left: 3px">
            </span>
          </div>
          <div class="control-group">
            <label class="control-label" for="colorarea" style="font-weight: normal">Click to copy RGB matrix: </label>
            <div class="controls">
              <textarea id="colorarea" name="colorarea" rows="6" class="form-control"></textarea>
            </div>
          </div>
        </fieldset>
      </form>
    </div>
  </div>

</div>

<script src="javascripts/colormapLine.js"></script>
<script src="javascripts/drawColorbar.js"></script>
<script>
  window.onload = function() {
    // Configure and create Raphael object
    var W = 460,
        H = 350,
        r = Raphael("raph-holder", W, H);

    graph = r.rect(5, 0, 450, H, 10).attr({fill: '#eee', stroke: '#999', 'stroke-width': 1});

    gridp = "M120,0L120,350M230,0L230,350M340,0L340,350M5,88L455,88M5,175L455,175M5,263L455,263"
    gridPath = r.path(gridp).attr({stroke: '#bbb'});

    var Red = new colormapLine(r, 5, "rgb(255,0,0)");
    var Green = new colormapLine(r, 5, "rgb(0,255,0)");
    var Blue = new colormapLine(r, 5, "rgb(0,0,255)");
    var cmapLines = [Red, Green, Blue];

    var cbarW = 450,
        cbarH = 50,
        numColors = 150,
        rcbar = Raphael("raph-cbar-holder", cbarW, cbarH);

    // Get the colorbar rectangles and set the drag events to update.
    var colorRects = initColorbar(r, rcbar, numColors, cmapLines);
    cbarRect = rcbar.rect(0,0,cbarW,cbarH).attr({stroke: '#666'});

    var updateCBar = function() {

      var RIV = Red.getIntensityValues(numColors);
      var GIV = Green.getIntensityValues(numColors);
      var BIV = Blue.getIntensityValues(numColors);

      for(var color = 0; color <= numColors; color++) {
          hexcolor = Raphael.rgb(RIV[color], GIV[color], BIV[color]);
          colorRects[color].attr({fill: hexcolor, "stroke-width": 0});
      }

      cbarRect.toFront();
    };

    var updateColorArea = function() {
      var cval = $("#ncolorsinput").val();
      var RIV = Red.getIntensityValues(cval);
      var GIV = Green.getIntensityValues(cval);
      var BIV = Blue.getIntensityValues(cval);

      areastring = "[";
      var colorstring = "";
      for(var color = 0; color < cval; color++) {
          colorstring = RIV[color].toFixed(4) + "," + GIV[color].toFixed(4) + "," + BIV[color].toFixed(4) + ";\n";
          areastring += colorstring;
      }
      areastring += "]";
      $("#colorarea").val(areastring);
    };

    for(var i = 0; i < cmapLines.length; i++) {
      for(var j = 0; j < cmapLines[i].buttons.items.length; j++) {
        cmapLines[i].buttons.items[j].drag(function (dx,dy) { updateCBar(); },
                                           function(x,y) {},
                                           function() { updateColorArea(); });
      }
    }

    $("#rfrontbutton").click(function(){
      Red.buttons.toFront();
      Red.path.toFront();
    });
    $("#gfrontbutton").click(function(){
      Green.buttons.toFront();
      Green.path.toFront();
    });
    $("#bfrontbutton").click(function(){
      Blue.buttons.toFront();
      Blue.path.toFront();
    });
    $("#rgswapbutton").click(function() {
      swapLines(Red, Green);
    });
    $("#rbswapbutton").click(function() {
      swapLines(Red, Blue);
    });
    $("#gbswapbutton").click(function() {
      swapLines(Green, Blue);
    });
    $("#flipbutton").click(function() {
      flipLine(Red); flipLine(Green); flipLine(Blue);
    });
    $("#ncolorsinput").change(function() {
      if($(this).val() < 2) $(this).val(2);
      else if($(this).val() > 256) $(this).val(256);
      else {}
      updateColorArea();
    });

    // Swap two color curves
    var swapLines = function(Line1, Line2) {
  
      var tempVal = 0;
      for(var i = 0; i < Line1.buttons.items.length; i++) {
        tempVal = Line1.buttons.items[i].attr('cy');
        Line1.buttons.items[i].attr({cy: Line2.buttons.items[i].attr('cy')})
        Line2.buttons.items[i].attr({cy: tempVal});
      }

      Line1.drawPath();
      Line2.drawPath();
      updateCBar();
      updateColorArea();
    };

    // Flip a single color curve
    var flipLine = function(Line1) {
      var tempVal = 0;
      var endIdx = Line1.buttons.items.length-1;
      for(var i = 0; i < endIdx/2; i++) {
        tempVal = Line1.buttons.items[i].attr('cy');
        Line1.buttons.items[i].attr({cy: Line1.buttons.items[endIdx-i].attr('cy')})
        Line1.buttons.items[endIdx-i].attr({cy: tempVal});
      }
      Line1.drawPath();
      updateCBar();
      updateColorArea();
    };

    updateColorArea();

  };
</script>
    